const Web3 = require('web3');
const Tx = require('ethereumjs-tx').Transaction;
/* 
bellow paste the http link with API code
we are using the ropsten testnet
remove < >
*/
const provider = new Web3.providers.HttpProvider("< https://ropsten.infura.io/v3/API >"); //RPC server Address
const web3 = new Web3(provider);


web3.eth.net.isListening()
   .then(() => console.log('web3 is connected'))
   .catch(e => console.log('Wow. Something went wrong'));


// export from metamask
const privateKey1 = Buffer.from('<paste your private key here>', 'hex');

const account1 = '<paste your account address here>'
web3.eth.defaultAccount = account1;

console.log(account1);


// from remix in "Compilation details" > "WEB3DEPLOY" > paste the data object bellow
const myData = '0x608060405234801561001057600080fd5b50610810806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632a1afcd91461005c578063653fab711461007a57806365560950146100985780636d4ce63c146100b4578063a3be02ae146100d4575b600080fd5b6100646100f2565b604051610071919061058d565b60405180910390f35b6100826100f8565b60405161008f919061056b565b60405180910390f35b6100b260048036038101906100ad9190610430565b610186565b005b6100bc61026b565b6040516100cb939291906105a8565b60405180910390f35b6100dc61027a565b6040516100e9919061056b565b60405180910390f35b60005481565b60018054610105906106dd565b80601f0160208091040260200160405190810160405280929190818152602001828054610131906106dd565b801561017e5780601f106101535761010080835404028352916020019161017e565b820191906000526020600020905b81548152906001019060200180831161016157829003601f168201915b505050505081565b7fc9db20adedc6cf2b5d25252b101ab03e124902a73fcb12b753f3d1aaa2d8f9f533846040516101b7929190610542565b60405180910390a17f153da300128efcf0b0e91285bfee2adceea50a530ec3fa4d0520357f1b78fa7733836040516101f0929190610512565b60405180910390a17f5fafd17883858fb6b65b829887a8909fa9ef98c622f134821d10020bf74f4ec03382604051610229929190610512565b60405180910390a182600081905550816001908051906020019061024e929190610308565b508060029080519060200190610265929190610308565b50505050565b60006060806000549250909192565b60028054610287906106dd565b80601f01602080910402602001604051908101604052809291908181526020018280546102b3906106dd565b80156103005780601f106102d557610100808354040283529160200191610300565b820191906000526020600020905b8154815290600101906020018083116102e357829003601f168201915b505050505081565b828054610314906106dd565b90600052602060002090601f016020900481019282610336576000855561037d565b82601f1061034f57805160ff191683800117855561037d565b8280016001018555821561037d579182015b8281111561037c578251825591602001919060010190610361565b5b50905061038a919061038e565b5090565b5b808211156103a757600081600090555060010161038f565b5090565b60006103be6103b984610612565b6105ed565b9050828152602081018484840111156103da576103d96107a3565b5b6103e584828561069b565b509392505050565b600082601f8301126104025761040161079e565b5b81356104128482602086016103ab565b91505092915050565b60008135905061042a816107c3565b92915050565b600080600060608486031215610449576104486107ad565b5b60006104578682870161041b565b935050602084013567ffffffffffffffff811115610478576104776107a8565b5b610484868287016103ed565b925050604084013567ffffffffffffffff8111156104a5576104a46107a8565b5b6104b1868287016103ed565b9150509250925092565b6104c48161065f565b82525050565b60006104d582610643565b6104df818561064e565b93506104ef8185602086016106aa565b6104f8816107b2565b840191505092915050565b61050c81610691565b82525050565b600060408201905061052760008301856104bb565b818103602083015261053981846104ca565b90509392505050565b600060408201905061055760008301856104bb565b6105646020830184610503565b9392505050565b6000602082019050818103600083015261058581846104ca565b905092915050565b60006020820190506105a26000830184610503565b92915050565b60006060820190506105bd6000830186610503565b81810360208301526105cf81856104ca565b905081810360408301526105e381846104ca565b9050949350505050565b60006105f7610608565b9050610603828261070f565b919050565b6000604051905090565b600067ffffffffffffffff82111561062d5761062c61076f565b5b610636826107b2565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600061066a82610671565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156106c85780820151818401526020810190506106ad565b838111156106d7576000848401525b50505050565b600060028204905060018216806106f557607f821691505b6020821081141561070957610708610740565b5b50919050565b610718826107b2565b810181811067ffffffffffffffff821117156107375761073661076f565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6107cc81610691565b81146107d757600080fd5b5056fea26469706673582212204aebe66e939326afdca8a82506ce73a420c122e41d3ea522d731bcc6e960dcec64736f6c63430008070033';

web3.eth.getTransactionCount(account1, (err, txCount) => {
  const txObject = {
    nonce:    web3.utils.toHex(txCount),
    to:       null,
    value:    web3.utils.toHex(web3.utils.toWei('0', 'ether')),
    gasLimit: web3.utils.toHex(2100000),
    gasPrice: web3.utils.toHex(web3.utils.toWei('6', 'gwei')),
    data: myData  
  }
    // Sign the transaction
    const tx = new Tx(txObject,{'chain':'ropsten'});
    tx.sign(privateKey1);
  
    const serializedTx = tx.serialize();
    const raw = '0x' + serializedTx.toString('hex');
  
    // Broadcast the transaction
    const transaction = web3.eth.sendSignedTransaction(raw, (err, tx) => {
        console.log('err:', err, 'txHash:',tx)
    });
  
  }); 


// use the etherscan to explore





