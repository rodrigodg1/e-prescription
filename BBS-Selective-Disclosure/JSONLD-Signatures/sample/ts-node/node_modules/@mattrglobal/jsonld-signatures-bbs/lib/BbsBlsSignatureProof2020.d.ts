import { suites } from "jsonld-signatures";
import { DeriveProofOptions, VerifyProofOptions, CreateVerifyDataOptions, CanonizeOptions } from "./types";
import { VerifyProofResult } from "./types/VerifyProofResult";
export declare class BbsBlsSignatureProof2020 extends suites.LinkedDataProof {
    constructor({ useNativeCanonize, key, LDKeyClass }?: any);
    /**
     * Derive a proof from a proof and reveal document
     *
     * @param options {object} options for deriving a proof.
     *
     * @returns {Promise<object>} Resolves with the derived proof object.
     */
    deriveProof(options: DeriveProofOptions): Promise<object>;
    /**
     * @param options {object} options for verifying the proof.
     *
     * @returns {Promise<{object}>} Resolves with the verification result.
     */
    verifyProof(options: VerifyProofOptions): Promise<VerifyProofResult>;
    canonize(input: any, options: CanonizeOptions): Promise<string>;
    canonizeProof(proof: any, options: CanonizeOptions): Promise<string>;
    /**
     * @param document {CreateVerifyDataOptions} options to create verify data
     *
     * @returns {Promise<{string[]>}.
     */
    createVerifyData(options: CreateVerifyDataOptions): Promise<string[]>;
    /**
     * @param proof to canonicalize
     * @param options to create verify data
     *
     * @returns {Promise<{string[]>}.
     */
    createVerifyProofData(proof: any, { documentLoader, expansionMap }: any): Promise<string[]>;
    /**
     * @param document to canonicalize
     * @param options to create verify data
     *
     * @returns {Promise<{string[]>}.
     */
    createVerifyDocumentData(document: any, { documentLoader, expansionMap }: any): Promise<string[]>;
    /**
     * @param document {object} to be signed.
     * @param proof {object}
     * @param documentLoader {function}
     * @param expansionMap {function}
     */
    getVerificationMethod({ proof, documentLoader }: any): Promise<object>;
    static proofType: string[];
    static supportedDerivedProofType: string[];
}
