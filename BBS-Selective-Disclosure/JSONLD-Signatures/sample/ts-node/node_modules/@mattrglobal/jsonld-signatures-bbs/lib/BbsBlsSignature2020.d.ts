import { suites } from "jsonld-signatures";
import { SignatureSuiteOptions, CreateProofOptions, CanonizeOptions, CreateVerifyDataOptions, VerifyProofOptions, VerifySignatureOptions, SuiteSignOptions } from "./types";
/**
 * A BBS+ signature suite for use with BLS12-381 key pairs
 */
export declare class BbsBlsSignature2020 extends suites.LinkedDataProof {
    /**
     * Default constructor
     * @param options {SignatureSuiteOptions} options for constructing the signature suite
     */
    constructor(options?: SignatureSuiteOptions);
    /**
     * @param options {CreateProofOptions} options for creating the proof
     *
     * @returns {Promise<object>} Resolves with the created proof object.
     */
    createProof(options: CreateProofOptions): Promise<object>;
    /**
     * @param options {object} options for verifying the proof.
     *
     * @returns {Promise<{object}>} Resolves with the verification result.
     */
    verifyProof(options: VerifyProofOptions): Promise<object>;
    canonize(input: any, options: CanonizeOptions): Promise<string>;
    canonizeProof(proof: any, options: CanonizeOptions): Promise<string>;
    /**
     * @param document {CreateVerifyDataOptions} options to create verify data
     *
     * @returns {Promise<{string[]>}.
     */
    createVerifyData(options: CreateVerifyDataOptions): Promise<string[]>;
    /**
     * @param proof to canonicalize
     * @param options to create verify data
     *
     * @returns {Promise<{string[]>}.
     */
    createVerifyProofData(proof: any, { documentLoader, expansionMap }: any): Promise<string[]>;
    /**
     * @param document to canonicalize
     * @param options to create verify data
     *
     * @returns {Promise<{string[]>}.
     */
    createVerifyDocumentData(document: any, { documentLoader, expansionMap }: any): Promise<string[]>;
    /**
     * @param document {object} to be signed.
     * @param proof {object}
     * @param documentLoader {function}
     * @param expansionMap {function}
     */
    getVerificationMethod({ proof, documentLoader }: any): Promise<any>;
    /**
     * @param options {SuiteSignOptions} Options for signing.
     *
     * @returns {Promise<{object}>} the proof containing the signature value.
     */
    sign(options: SuiteSignOptions): Promise<object>;
    /**
     * @param verifyData {VerifySignatureOptions} Options to verify the signature.
     *
     * @returns {Promise<boolean>}
     */
    verifySignature(options: VerifySignatureOptions): Promise<boolean>;
    static proofType: string[];
}
