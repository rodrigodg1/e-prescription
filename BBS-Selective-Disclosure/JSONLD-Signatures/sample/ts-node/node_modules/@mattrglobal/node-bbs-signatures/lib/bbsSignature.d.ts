import { BbsBlindSignRequest, BbsCreateProofRequest, BbsSignRequest, BlsBbsSignRequest, BbsVerifyProofRequest, BlsBbsVerifyRequest, BbsVerifyRequest, BbsBlindSignContextRequest, BbsVerifyBlindSignContextRequest, BbsBlindSignContext, BbsVerifyResult } from "./types";
/**
 * Default BBS Signature Length
 */
export declare const BBS_SIGNATURE_LENGTH = 112;
/**
 * Signs a set of messages with a BBS key pair and produces a BBS signature
 * @param request Request for the sign operation
 *
 * @returns The raw signature value
 */
export declare const sign: (request: BbsSignRequest) => Promise<Uint8Array>;
/**
 * Signs a set of messages with a BLS 12-381 key pair and produces a BBS signature
 * @param request Request for the sign operation
 *
 * @returns The raw signature value
 */
export declare const blsSign: (request: BlsBbsSignRequest) => Promise<Uint8Array>;
/**
 * Verifies a BBS+ signature for a set of messages with a BBS public key
 * @param request Request for the signature verification operation
 *
 * @returns A result indicating if the signature was verified
 */
export declare const verify: (request: BbsVerifyRequest) => Promise<BbsVerifyResult>;
/**
 * Verifies a BBS+ signature for a set of messages with a with a BLS 12-381 public key
 * @param request Request for the signature verification operation
 *
 * @returns A result indicating if the signature was verified
 */
export declare const blsVerify: (request: BlsBbsVerifyRequest) => Promise<BbsVerifyResult>;
/**
 * Creates a BBS+ proof for a set of messages from a BBS public key and a BBS signature
 * @param request Request for the create proof operation
 *
 * @returns The raw proof value
 */
export declare const createProof: (request: BbsCreateProofRequest) => Promise<Uint8Array>;
/**
 * Creates a BBS+ proof for a set of messages from a BLS12-381 public key and a BBS signature
 * @param request Request for the create proof operation
 *
 * @returns The raw proof value
 */
export declare const blsCreateProof: (request: BbsCreateProofRequest) => Promise<Uint8Array>;
/**
 * Verifies a BBS+ proof with a BBS public key
 * @param request Request for the verify proof operation
 *
 * @returns A result indicating if the proof was verified
 */
export declare const verifyProof: (request: BbsVerifyProofRequest) => Promise<BbsVerifyResult>;
/**
 * Verifies a BBS+ proof with a BLS12-381 public key
 * @param request Request for the verify proof operation
 *
 * @returns A result indicating if the proof was verified
 */
export declare const blsVerifyProof: (request: BbsVerifyProofRequest) => Promise<BbsVerifyResult>;
/**
 * Create a blinded commitment of messages for use in producing a blinded BBS+ signature
 * @param request Request for producing the blinded commitment
 *
 * @returns A commitment context
 */
export declare const commitmentForBlindSignRequest: (request: BbsBlindSignContextRequest) => Promise<BbsBlindSignContext>;
/**
 * Verifies a blind commitment of messages
 * @param request Request for the commitment verification
 *
 * @returns A boolean indicating if the context was verified
 */
export declare const verifyBlindSignContext: (request: BbsVerifyBlindSignContextRequest) => Promise<boolean>;
/**
 * Signs a set of messages featuring both known and blinded messages to the signer and produces a BBS+ signature
 * @param request Request for the blind sign operation
 *
 * @returns The raw signature value
 */
export declare const blindSign: (request: BbsBlindSignRequest) => Promise<Uint8Array>;
