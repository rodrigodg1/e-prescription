"use strict";
/*
 * Copyright 2020 - MATTR Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateBlindedBls12381G2KeyPair = exports.generateBls12381G2KeyPair = exports.generateBlindedBls12381G1KeyPair = exports.generateBls12381G1KeyPair = void 0;
/**
 * @ignore
 */
// eslint-disable-next-line @typescript-eslint/no-var-requires
var path = require("path");
// eslint-disable-next-line @typescript-eslint/no-var-requires
var bbs = require(path.resolve(path.join(__dirname, "../native/index.node")));
/**
 * Generates a BLS12-381 key pair where the public key is a commitment in G1
 * @param seed [Optional] To derive the key pair from
 *
 * @returns A BlsKeyPair
 */
exports.generateBls12381G1KeyPair = function (seed) { return __awaiter(void 0, void 0, void 0, function () {
    var result;
    return __generator(this, function (_a) {
        result = seed ? bbs.bls_generate_g1_key(seed === null || seed === void 0 ? void 0 : seed.buffer) : bbs.bls_generate_g1_key();
        return [2 /*return*/, {
                publicKey: new Uint8Array(result.publicKey),
                secretKey: new Uint8Array(result.secretKey),
            }];
    });
}); };
/**
 * Generates a blinded BLS12-381 key pair where the public key is a commitment in G1 to the private key
 * along with a further commitment of a blinding factor to the blinding factor generator point in G1
 * @param seed [Optional] To derive the key pair from
 *
 * @returns A BlindedBlsKeyPair
 */
exports.generateBlindedBls12381G1KeyPair = function (seed) { return __awaiter(void 0, void 0, void 0, function () {
    var result;
    return __generator(this, function (_a) {
        result = seed ? bbs.bls_generate_blinded_g1_key(seed === null || seed === void 0 ? void 0 : seed.buffer) : bbs.bls_generate_blinded_g1_key();
        return [2 /*return*/, {
                publicKey: new Uint8Array(result.publicKey),
                secretKey: new Uint8Array(result.secretKey),
                blindingFactor: new Uint8Array(result.blindingFactor),
            }];
    });
}); };
/**
 * Generates a BLS12-381 key pair where the public key is a commitment in G2
 * @param seed [Optional] To derive the key pair from
 *
 * @returns A BlsKeyPair
 */
exports.generateBls12381G2KeyPair = function (seed) { return __awaiter(void 0, void 0, void 0, function () {
    var result;
    return __generator(this, function (_a) {
        result = seed ? bbs.bls_generate_g2_key(seed === null || seed === void 0 ? void 0 : seed.buffer) : bbs.bls_generate_g2_key();
        return [2 /*return*/, {
                publicKey: new Uint8Array(result.publicKey),
                secretKey: new Uint8Array(result.secretKey),
            }];
    });
}); };
/**
 * Generates a blinded BLS12-381 key pair where the public key is a commitment in G2 to the private key
 * along with a further commitment of a blinding factor to the blinding factor generator point in G2
 * @param seed [Optional] To derive the key pair from
 *
 * @returns A BlindedBlsKeyPair
 */
exports.generateBlindedBls12381G2KeyPair = function (seed) { return __awaiter(void 0, void 0, void 0, function () {
    var result;
    return __generator(this, function (_a) {
        result = seed ? bbs.bls_generate_blinded_g2_key(seed === null || seed === void 0 ? void 0 : seed.buffer) : bbs.bls_generate_blinded_g2_key();
        return [2 /*return*/, {
                publicKey: new Uint8Array(result.publicKey),
                secretKey: new Uint8Array(result.secretKey),
                blindingFactor: new Uint8Array(result.blindingFactor),
            }];
    });
}); };
//# sourceMappingURL=bls12381.js.map