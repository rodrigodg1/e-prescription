"use strict";
/*
 * Copyright 2020 - MATTR Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.blindSign = exports.verifyBlindSignContext = exports.commitmentForBlindSignRequest = exports.blsVerifyProof = exports.verifyProof = exports.blsCreateProof = exports.createProof = exports.blsVerify = exports.verify = exports.blsSign = exports.sign = exports.BBS_SIGNATURE_LENGTH = void 0;
var bls12381toBbs_1 = require("./bls12381toBbs");
/**
 * @ignore
 */
// eslint-disable-next-line @typescript-eslint/no-var-requires
var path = require("path");
// eslint-disable-next-line @typescript-eslint/no-var-requires
var bbs = require(path.resolve(path.join(__dirname, "../native/index.node")));
/**
 * Default BBS Signature Length
 */
exports.BBS_SIGNATURE_LENGTH = 112;
/**
 * Signs a set of messages with a BBS key pair and produces a BBS signature
 * @param request Request for the sign operation
 *
 * @returns The raw signature value
 */
exports.sign = function (request) { return __awaiter(void 0, void 0, void 0, function () {
    var keyPair, messages, messageBuffers;
    var _a;
    return __generator(this, function (_b) {
        keyPair = request.keyPair, messages = request.messages;
        messageBuffers = messages.map(function (_) { return _.buffer; });
        try {
            return [2 /*return*/, new Uint8Array(bbs.bbs_sign({
                    publicKey: keyPair.publicKey.buffer,
                    secretKey: (_a = keyPair.secretKey) === null || _a === void 0 ? void 0 : _a.buffer,
                    messages: messageBuffers,
                }))];
        }
        catch (_c) {
            throw new Error("Failed to sign");
        }
        return [2 /*return*/];
    });
}); };
/**
 * Signs a set of messages with a BLS 12-381 key pair and produces a BBS signature
 * @param request Request for the sign operation
 *
 * @returns The raw signature value
 */
exports.blsSign = function (request) { return __awaiter(void 0, void 0, void 0, function () {
    var keyPair, messages, bbsKeyPair, messageBuffers;
    var _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                keyPair = request.keyPair, messages = request.messages;
                return [4 /*yield*/, bls12381toBbs_1.bls12381toBbs({ keyPair: keyPair, messageCount: messages.length })];
            case 1:
                bbsKeyPair = _b.sent();
                messageBuffers = messages.map(function (_) { return _.buffer; });
                try {
                    return [2 /*return*/, new Uint8Array(bbs.bbs_sign({
                            publicKey: bbsKeyPair.publicKey.buffer,
                            secretKey: (_a = bbsKeyPair.secretKey) === null || _a === void 0 ? void 0 : _a.buffer,
                            messages: messageBuffers,
                        }))];
                }
                catch (_c) {
                    throw new Error("Failed to sign");
                }
                return [2 /*return*/];
        }
    });
}); };
/**
 * Verifies a BBS+ signature for a set of messages with a BBS public key
 * @param request Request for the signature verification operation
 *
 * @returns A result indicating if the signature was verified
 */
exports.verify = function (request) { return __awaiter(void 0, void 0, void 0, function () {
    var publicKey, signature, messages, messageBuffers, result;
    return __generator(this, function (_a) {
        publicKey = request.publicKey, signature = request.signature, messages = request.messages;
        messageBuffers = messages.map(function (_) { return _.buffer; });
        try {
            result = bbs.bbs_verify({
                publicKey: publicKey.buffer,
                signature: signature.buffer,
                messages: messageBuffers,
            });
            return [2 /*return*/, { verified: result }];
        }
        catch (ex) {
            return [2 /*return*/, { verified: false, error: ex }];
        }
        return [2 /*return*/];
    });
}); };
/**
 * Verifies a BBS+ signature for a set of messages with a with a BLS 12-381 public key
 * @param request Request for the signature verification operation
 *
 * @returns A result indicating if the signature was verified
 */
exports.blsVerify = function (request) { return __awaiter(void 0, void 0, void 0, function () {
    var publicKey, signature, messages, bbsKeyPair, messageBuffers, result, ex_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                publicKey = request.publicKey, signature = request.signature, messages = request.messages;
                return [4 /*yield*/, bls12381toBbs_1.bls12381toBbs({ keyPair: { publicKey: publicKey }, messageCount: messages.length })];
            case 1:
                bbsKeyPair = _a.sent();
                messageBuffers = messages.map(function (_) { return _.buffer; });
                result = bbs.bbs_verify({
                    publicKey: bbsKeyPair.publicKey.buffer,
                    signature: signature.buffer,
                    messages: messageBuffers,
                });
                return [2 /*return*/, { verified: result }];
            case 2:
                ex_1 = _a.sent();
                return [2 /*return*/, { verified: false, error: ex_1 }];
            case 3: return [2 /*return*/];
        }
    });
}); };
/**
 * Creates a BBS+ proof for a set of messages from a BBS public key and a BBS signature
 * @param request Request for the create proof operation
 *
 * @returns The raw proof value
 */
exports.createProof = function (request) { return __awaiter(void 0, void 0, void 0, function () {
    var publicKey, signature, messages, nonce, revealed, messageBuffers;
    return __generator(this, function (_a) {
        publicKey = request.publicKey, signature = request.signature, messages = request.messages, nonce = request.nonce, revealed = request.revealed;
        messageBuffers = messages.map(function (_) { return _.buffer; });
        try {
            return [2 /*return*/, new Uint8Array(bbs.bbs_create_proof({
                    nonce: nonce.buffer,
                    revealed: revealed,
                    publicKey: publicKey.buffer,
                    signature: signature.buffer,
                    messages: messageBuffers,
                }))];
        }
        catch (ex) {
            throw new Error("Failed to create proof");
        }
        return [2 /*return*/];
    });
}); };
/**
 * Creates a BBS+ proof for a set of messages from a BLS12-381 public key and a BBS signature
 * @param request Request for the create proof operation
 *
 * @returns The raw proof value
 */
exports.blsCreateProof = function (request) { return __awaiter(void 0, void 0, void 0, function () {
    var publicKey, signature, messages, nonce, revealed, bbsKeyPair, messageBuffers;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                publicKey = request.publicKey, signature = request.signature, messages = request.messages, nonce = request.nonce, revealed = request.revealed;
                return [4 /*yield*/, bls12381toBbs_1.bls12381toBbs({ keyPair: { publicKey: publicKey }, messageCount: messages.length })];
            case 1:
                bbsKeyPair = _a.sent();
                messageBuffers = messages.map(function (_) { return _.buffer; });
                try {
                    return [2 /*return*/, new Uint8Array(bbs.bbs_create_proof({
                            nonce: nonce.buffer,
                            revealed: revealed,
                            publicKey: bbsKeyPair.publicKey.buffer,
                            signature: signature.buffer,
                            messages: messageBuffers,
                        }))];
                }
                catch (ex) {
                    throw new Error("Failed to create proof");
                }
                return [2 /*return*/];
        }
    });
}); };
/**
 * Verifies a BBS+ proof with a BBS public key
 * @param request Request for the verify proof operation
 *
 * @returns A result indicating if the proof was verified
 */
exports.verifyProof = function (request) { return __awaiter(void 0, void 0, void 0, function () {
    var publicKey, proof, messages, nonce, messageBuffers, result;
    return __generator(this, function (_a) {
        publicKey = request.publicKey, proof = request.proof, messages = request.messages, nonce = request.nonce;
        messageBuffers = messages.map(function (_) { return _.buffer; });
        try {
            result = bbs.bbs_verify_proof({
                nonce: nonce.buffer,
                publicKey: publicKey.buffer,
                proof: proof.buffer,
                messages: messageBuffers,
            });
            return [2 /*return*/, { verified: result }];
        }
        catch (ex) {
            return [2 /*return*/, { verified: false, error: ex }];
        }
        return [2 /*return*/];
    });
}); };
/**
 * Verifies a BBS+ proof with a BLS12-381 public key
 * @param request Request for the verify proof operation
 *
 * @returns A result indicating if the proof was verified
 */
exports.blsVerifyProof = function (request) { return __awaiter(void 0, void 0, void 0, function () {
    var publicKey, proof, messages, nonce, messageBuffers, result;
    return __generator(this, function (_a) {
        try {
            publicKey = request.publicKey, proof = request.proof, messages = request.messages, nonce = request.nonce;
            messageBuffers = messages.map(function (_) { return _.buffer; });
            result = bbs.bls_verify_proof({
                nonce: nonce.buffer,
                publicKey: publicKey.buffer,
                proof: proof.buffer,
                messages: messageBuffers,
            });
            return [2 /*return*/, { verified: result }];
        }
        catch (ex) {
            return [2 /*return*/, { verified: false, error: ex }];
        }
        return [2 /*return*/];
    });
}); };
/**
 * Create a blinded commitment of messages for use in producing a blinded BBS+ signature
 * @param request Request for producing the blinded commitment
 *
 * @returns A commitment context
 */
exports.commitmentForBlindSignRequest = function (request) { return __awaiter(void 0, void 0, void 0, function () {
    var publicKey, messages, hidden, nonce, messageBuffers;
    return __generator(this, function (_a) {
        publicKey = request.publicKey, messages = request.messages, hidden = request.hidden, nonce = request.nonce;
        messageBuffers = messages.map(function (_) { return _.buffer; });
        try {
            return [2 /*return*/, bbs.bbs_blind_signature_commitment({
                    publicKey: publicKey.buffer,
                    messages: messageBuffers,
                    hidden: hidden,
                    nonce: nonce,
                })];
        }
        catch (_b) {
            throw new Error("Failed to generate commitment");
        }
        return [2 /*return*/];
    });
}); };
/**
 * Verifies a blind commitment of messages
 * @param request Request for the commitment verification
 *
 * @returns A boolean indicating if the context was verified
 */
exports.verifyBlindSignContext = function (request) { return __awaiter(void 0, void 0, void 0, function () {
    var commitment, proofOfHiddenMessages, challengeHash, publicKey, blinded, nonce;
    return __generator(this, function (_a) {
        commitment = request.commitment, proofOfHiddenMessages = request.proofOfHiddenMessages, challengeHash = request.challengeHash, publicKey = request.publicKey, blinded = request.blinded, nonce = request.nonce;
        return [2 /*return*/, bbs.bbs_verify_blind_signature_proof({
                commitment: commitment.buffer,
                proofOfHiddenMessages: proofOfHiddenMessages.buffer,
                challengeHash: challengeHash.buffer,
                publicKey: publicKey.buffer,
                blinded: blinded,
                nonce: nonce,
            })];
    });
}); };
/**
 * Signs a set of messages featuring both known and blinded messages to the signer and produces a BBS+ signature
 * @param request Request for the blind sign operation
 *
 * @returns The raw signature value
 */
exports.blindSign = function (request) { return __awaiter(void 0, void 0, void 0, function () {
    var commitment, secretKey, messages, messageBuffers;
    return __generator(this, function (_a) {
        commitment = request.commitment, secretKey = request.secretKey, messages = request.messages;
        messageBuffers = messages.map(function (_) { return _.buffer; });
        try {
            return [2 /*return*/, new Uint8Array(bbs.bbs_blind_sign({
                    commitment: commitment.buffer,
                    secretKey: secretKey.buffer,
                    messages: messageBuffers,
                }))];
        }
        catch (ex) {
            throw new Error("Failed to sign");
        }
        return [2 /*return*/];
    });
}); };
//# sourceMappingURL=bbsSignature.js.map