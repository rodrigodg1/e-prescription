import { BlsKeyPair, BlindedBlsKeyPair } from "./types";
/**
 * Generates a BLS12-381 key pair where the public key is a commitment in G1
 * @param seed [Optional] To derive the key pair from
 *
 * @returns A BlsKeyPair
 */
export declare const generateBls12381G1KeyPair: (seed?: Uint8Array | undefined) => Promise<Required<BlsKeyPair>>;
/**
 * Generates a blinded BLS12-381 key pair where the public key is a commitment in G1 to the private key
 * along with a further commitment of a blinding factor to the blinding factor generator point in G1
 * @param seed [Optional] To derive the key pair from
 *
 * @returns A BlindedBlsKeyPair
 */
export declare const generateBlindedBls12381G1KeyPair: (seed?: Uint8Array | undefined) => Promise<Required<BlindedBlsKeyPair>>;
/**
 * Generates a BLS12-381 key pair where the public key is a commitment in G2
 * @param seed [Optional] To derive the key pair from
 *
 * @returns A BlsKeyPair
 */
export declare const generateBls12381G2KeyPair: (seed?: Uint8Array | undefined) => Promise<Required<BlsKeyPair>>;
/**
 * Generates a blinded BLS12-381 key pair where the public key is a commitment in G2 to the private key
 * along with a further commitment of a blinding factor to the blinding factor generator point in G2
 * @param seed [Optional] To derive the key pair from
 *
 * @returns A BlindedBlsKeyPair
 */
export declare const generateBlindedBls12381G2KeyPair: (seed?: Uint8Array | undefined) => Promise<Required<BlindedBlsKeyPair>>;
